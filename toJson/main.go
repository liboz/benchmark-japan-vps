package main

import (
	"database/sql"
	"encoding/json"
	"io/ioutil"
	"log"
	"os"
	"sort"

	_ "github.com/lib/pq"

	benchmarkv1 "liboz/benchmark-japan-vps/gen/service/v1" // generated by protoc-gen-go
)

func readBenchmarkResults(db *sql.DB) map[int64]*benchmarkv1.BenchmarkResult {
	rows, err := db.Query("select * from benchmark_results")

	if err != nil {
		log.Panic("error reading benchmark_results", err)
	}
	defer rows.Close()

	sqlData := make(map[int64]*benchmarkv1.BenchmarkResult)

	// Loop through rows, using Scan to assign column data to struct fields.
	for rows.Next() {
		var benchmark_id int64
		var result benchmarkv1.BenchmarkResult
		if err := rows.Scan(&benchmark_id, &result.IpAddress, &result.Name,
			&result.StartTime, &result.EndTime, &result.IoSpeed, &result.SingleCoreGeekbench, &result.MultiCoreGeekbench); err != nil {
			log.Panic("error parsing benchmark_results", err)
		}
		result.IpAddress = "" // clear the IP Address as it's not useful
		sqlData[benchmark_id] = &result
	}
	if err = rows.Err(); err != nil {
		log.Panic("error reading rows for benchmark_results", err)
	}
	return sqlData
}

func getSpeedTestResults(db *sql.DB, sqlData map[int64]*benchmarkv1.BenchmarkResult) {
	rows, err := db.Query("select * from speed_test_results")

	if err != nil {
		log.Panic("error reading speed_test_results", err)
	}
	defer rows.Close()

	// Loop through rows, using Scan to assign column data to struct fields.
	for rows.Next() {
		var speed_test_result_id int64
		var benchmark_id int64
		var result benchmarkv1.SpeedTestResult
		if err := rows.Scan(&speed_test_result_id, &benchmark_id, &result.City, &result.Country,
			&result.UploadSpeed, &result.DownloadSpeed); err != nil {
			log.Panic("error parsing speed_test_results", err)
		}
		result.Country = "" // clear the Country as it's not useful
		sqlData[benchmark_id].SpeedTestResults = append(sqlData[benchmark_id].SpeedTestResults, &result)
	}
	if err = rows.Err(); err != nil {
		log.Panic("error reading rows for speed_test_results", err)
	}
}

func getPingTestResults(db *sql.DB, sqlData map[int64]*benchmarkv1.BenchmarkResult) {
	rows, err := db.Query("select * from ping_test_results")

	if err != nil {
		log.Panic("error reading ping_test_results", err)
	}
	defer rows.Close()

	// Loop through rows, using Scan to assign column data to struct fields.
	for rows.Next() {
		var ping_test_result_id int64
		var benchmark_id int64
		var result benchmarkv1.PingTestResult
		if err := rows.Scan(&ping_test_result_id, &benchmark_id, &result.Url, &result.DroppedPackets,
			&result.MinimumPing, &result.AveragePing, &result.MaximumPing, &result.StandardDeviation); err != nil {
			log.Panic("error parsing ping_test_results", err)
		}
		sqlData[benchmark_id].PingTestResults = append(sqlData[benchmark_id].PingTestResults, &result)
	}
	if err = rows.Err(); err != nil {
		log.Panic("error reading rows for ping_test_results", err)
	}
}

func formatForJson(sqlData map[int64]*benchmarkv1.BenchmarkResult) map[string][]*benchmarkv1.BenchmarkResult {
	jsonData := make(map[string][]*benchmarkv1.BenchmarkResult)

	for _, result := range sqlData {
		jsonData[result.Name] = append(jsonData[result.Name], result)
	}

	return jsonData
}

func main() {
	argsWithoutProg := os.Args[1:]

	connStr := argsWithoutProg[0]
	db, err := sql.Open("postgres", connStr)
	if err != nil {
		log.Fatal("error connecting to postgres", err)
	}

	sqlData := readBenchmarkResults(db)
	getPingTestResults(db, sqlData)
	getSpeedTestResults(db, sqlData)

	log.Print("successfully parsed the data!")

	jsonData := formatForJson(sqlData)
	log.Print("successfully converted data to json!")

	for _, result := range jsonData {
		sort.Slice(result, func(i, j int) bool {
			return result[i].StartTime < result[j].StartTime
		})
	}

	file, err := json.MarshalIndent(jsonData, "", " ")
	if err != nil {
		log.Fatal("error marshalling to json", err)
	}

	err = ioutil.WriteFile("output.json", file, 0644)

	if err != nil {
		log.Fatal("error outputting to json", err)
	}
}
