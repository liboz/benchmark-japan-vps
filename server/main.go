package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"sync"
	"time"

	"github.com/bufbuild/connect-go"

	benchmarkv1 "liboz/benchmark-japan-vps/gen/service/v1"        // generated by protoc-gen-go
	"liboz/benchmark-japan-vps/gen/service/v1/benchmarkv1connect" // generated by protoc-gen-connect-go
)

var PORT = 8000

var RESULTS = []*benchmarkv1.GetResultsResponse_Result{}

type BenchmarkServer struct {
	mutex sync.Mutex
}

func (s *BenchmarkServer) updateResults(result *benchmarkv1.GetResultsResponse_Result) {
	s.mutex.Lock()
	defer s.mutex.Unlock()
	RESULTS = append(RESULTS, result)
}

func (s *BenchmarkServer) runBenchmark() {
	startTime := time.Now().Unix()
	endTime := time.Now().Unix()
	log.Printf("Benchmark took %dms to run", endTime-startTime)
	result := &benchmarkv1.GetResultsResponse_Result{}
	result.StartTime = startTime
	result.EndTime = endTime
	s.updateResults(result)
}

func (s *BenchmarkServer) GetResults(
	ctx context.Context,
	req *connect.Request[benchmarkv1.GetResultsRequest],
) (*connect.Response[benchmarkv1.GetResultsResponse], error) {
	s.mutex.Lock()
	currentResults := RESULTS
	RESULTS = []*benchmarkv1.GetResultsResponse_Result{}
	s.mutex.Unlock()
	return connect.NewResponse(&benchmarkv1.GetResultsResponse{Results: currentResults}), nil
}

func main() {
	benchmarkServer := &BenchmarkServer{}
	mux := http.NewServeMux()
	path, handler := benchmarkv1connect.NewBenchmarkServiceHandler(benchmarkServer)
	mux.Handle(path, handler)

	log.Printf("Starting server on port %d\n", PORT)
	log.Fatal(http.ListenAndServe(":"+fmt.Sprintf("%d", PORT), mux))
}
